# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# enable environment settings
if [ -f ~/.bash_env ]; then
    . ~/.bash_env
fi

##############################
#         functions          #
##############################

# remove extra information from jpg-files
anonymise-jpg () {
    case $# in
        1)
            $FUNCNAME "$1" "$1"
            ;;
        2)
            convert "$1" +profile '*' "$2"
            ;;
        *)
            echo "Usage:"
            echo "  $FUNCNAME image"
            echo "  $FUNCNAME image-file target-file"
            ;;
    esac
}

git-find () {
    case $# in
        1)
            $FUNCNAME "refs/remotes/origin" "$1"
            ;;
        2)
            for branch in `git for-each-ref --format="%(refname)" $1`; do
                found=$(git ls-tree -r --name-only $branch | grep "$2")
                if [ $? -eq 0 ]; then
                    echo "${branch#$1/}: ($found)"
                fi
            done
            ;;
        *)
            echo "Usage:"
            echo "  $FUNCNAME regex"
            echo "    (where refs/remotes/origin will be searched)"
            echo "  $FUNCNAME namespace regex"
            ;;
    esac
}

unlink-hard-link () {
    case $# in
        1)
            if [ -f "$1" ]; then
                if [ -f "$1.$FUNCNAME" ]; then
                    echo "ERROR: Backup file '$1.$FUNCNAME' exists"
                    return 2
                fi
                mv "$1" "$1.$FUNCNAME"
                cp "$1.$FUNCNAME" "$1"
                rm -f "$1.$FUNCNAME"
            else
                echo "ERROR: File '$1' doesn't even exist.."
                return 1
            fi
            ;;
        *)
            echo "Usage:"
            echo "  $FUNCNAME file"
            ;;
    esac
}
